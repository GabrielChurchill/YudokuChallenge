Replit Implementation Note — Phone Mode Fix (Preferred Option)
Problem (phones only)
The custom on-screen keypad consumes ~50% of the viewport, leaving the Sudoku grid cramped.

Digits can spill past the rounded board corners due to missing clipping.

Desired behavior (phones only)
Tap a cell ⇒ native iOS numeric keyboard opens immediately.

No scrolling during play.

Keep a small bottom action bar for Clear / Hint (+30s) / Stop.

Grid and digits stay fully inside the rounded board container.

iPad behavior remains as-is (docked custom keypad). We’re changing phones only.

What to build (steps)
1) Responsive layout split
Use ≤640px (or your current “phone” breakpoint) to switch behavior.

css
Copy
Edit
/* Base app layout */
.app { display: grid; grid-template-rows: auto 1fr auto; height: 100dvh; }

@media (max-width: 640px) {
  .custom-keypad { display: none; }          /* hide keypad on phones */
  .action-bar {
    display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 12px;
    position: fixed; left: 0; right: 0;
    bottom: max(12px, env(safe-area-inset-bottom));
    padding: 12px 16px calc(12px + env(safe-area-inset-bottom));
    background: var(--card);
    box-shadow: 0 -8px 24px rgba(0,0,0,.08);
    border-top-left-radius: 20px; border-top-right-radius: 20px;
    z-index: 20;
  }
  .board-wrap {
    /* Keep board visible above action bar */
    height: calc(100dvh - var(--header-h, 64px) - 88px);
    min-height: 0; display: grid; place-items: center;
  }
}

@media (min-width: 641px) {
  .custom-keypad { display: grid; }          /* iPad/desktop */
  .action-bar { display: none; }
}
2) Trigger the native number pad on phones
Add a hidden input and focus it on cell tap (must be on the same user gesture for iOS).

React (TypeScript)

tsx
Copy
Edit
// PhoneNumericInput.tsx
import { useEffect, useRef } from "react";

export function usePhoneNumericInput(
  onDigit: (d: number) => void,
  onBackspace: () => void
) {
  const ref = useRef<HTMLInputElement>(null);

  // Expose a method to focus the hidden input
  const focusPad = () => ref.current?.focus({ preventScroll: true });

  useEffect(() => {
    const el = ref.current!;
    const onInput = () => {
      const v = el.value.slice(-1);
      if (/[1-9]/.test(v)) onDigit(Number(v));
      if (v === "0") onBackspace();  // optional: treat 0 as clear
      el.value = "";
    };
    const onKey = (e: KeyboardEvent) => {
      if (e.key >= "1" && e.key <= "9") onDigit(Number(e.key));
      if (e.key === "Backspace") onBackspace();
    };
    el.addEventListener("input", onInput);
    window.addEventListener("keydown", onKey);
    return () => {
      el.removeEventListener("input", onInput);
      window.removeEventListener("keydown", onKey);
    };
  }, [onDigit, onBackspace]);

  return {
    HiddenInput: () => (
      <input
        ref={ref}
        type="tel"
        inputMode="numeric"
        pattern="[0-9]*"
        aria-hidden="true"
        style={{ position: "fixed", opacity: 0, pointerEvents: "none", left: -9999 }}
      />
    ),
    focusPad,
  };
}
Use it in the game page

tsx
Copy
Edit
const { HiddenInput, focusPad } = usePhoneNumericInput(
  (d) => placeDigit(activeCell, d),
  () => clearCell(activeCell)
);

// On cell tap (phones): set active cell, then focus the hidden input
function onCellTap(cell: Cell) {
  setActiveCell(cell);
  // Only focus in the same tap handler to satisfy iOS gesture requirement
  if (window.innerWidth <= 640) focusPad();
}
3) Keep the board visible when the keyboard opens
Use visualViewport to stabilize the usable height on iOS Safari.

ts
Copy
Edit
// visualViewport-fit.ts
export function installViewportFit() {
  const fit = () => {
    const h = window.visualViewport?.height ?? window.innerHeight;
    document.documentElement.style.setProperty("--vh", `${h}px`);
  };
  window.visualViewport?.addEventListener("resize", fit);
  window.addEventListener("resize", fit);
  fit();
}
css
Copy
Edit
/* Use the live viewport height to avoid jumps */
.app { height: var(--vh, 100dvh); }
Call installViewportFit() once on app mount.

4) Add a compact action bar on phones
tsx
Copy
Edit
<nav className="action-bar" aria-label="Actions">
  <button onClick={() => clearCell(activeCell)}>Clear</button>
  <button onClick={applyHint}>Hint (+30s)</button>
  <button className="danger" onClick={confirmStop}>Stop</button>
</nav>
5) Fix digits spilling past rounded corners
Clip the grid inside its rounded wrapper.

css
Copy
Edit
.board-outer {
  border-radius: 24px;
  overflow: hidden;                 /* or overflow: clip (Safari 17+) */
  background: var(--card);
  box-shadow: 0 8px 24px rgba(0,0,0,.06);
}
.board-canvas, .grid { border-radius: inherit; }
.grid { border-collapse: collapse; }
.cell { line-height: 1; border: 1.5px solid var(--divider-dark); }

/* Extra hard-clip if needed */
.board-outer { clip-path: inset(0 round 24px); }
Acceptance criteria (phones)
No vertical scrolling required during play (portrait/landscape).

Tapping any cell immediately opens the native numeric keyboard.

The grid remains fully visible when the keyboard is open.

Action bar stays above the home indicator (env(safe-area-inset-bottom)).

Digits never bleed beyond the rounded board corners.

Touch targets ≥ 44×44px; visible focus ring.

iPad layout remains unchanged (custom keypad visible, no regressions).

Rationale (why this approach)
Maximizes grid size: reclaim ~30–50% vertical space on phones.

Faster input for a timed competition: less eye/hand travel than a custom keypad.

Lower maintenance: native keyboard handles safe areas, autocorrect off, and hardware keyboards by default.

Predictable on iOS: focusing a hidden type="tel" input in the tap handler is reliable and performant.